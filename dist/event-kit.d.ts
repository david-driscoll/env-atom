// Generated by typings
// Source: emitter.d.ts
declare module '~event-kit/emitter' {
import Disposable = require('~event-kit/disposable');
class Emitter {
  clear(): void;
  dispose(): void;
  on(eventName: string, handler: (value: any) => void): Disposable;
  preempt(eventName: string, handler: (value: any) => void): Disposable;
  emit(eventName: string, value: any): void;
}

export = Emitter;
}
declare module 'event-kit/emitter' {
import alias = require('~event-kit/emitter');
export = alias;
}

// Generated by typings
// Source: disposable.d.ts
declare module '~event-kit/disposable' {
class Disposable {
  static isDisposable(object: Object): boolean;
  constructor(disposalAction: Function);
  dispose(): void;
}

export = Disposable;
}
declare module 'event-kit/disposable' {
import alias = require('~event-kit/disposable');
export = alias;
}

// Generated by typings
// Source: composite-disposable.d.ts
declare module '~event-kit/composite-disposable' {
class CompositeDisposable {
  constructor(...disposables: { dispose: () => any }[]);
  dispose(): void;
  add(...disposables: { dispose: () => any }[]): void;
  remove(disposable: { dispose: () => any }): void;
  clear(): void;
}

export = CompositeDisposable;
}
declare module 'event-kit/composite-disposable' {
import alias = require('~event-kit/composite-disposable');
export = alias;
}

// Generated by typings
// Source: event-kit.d.ts
declare module '~event-kit/event-kit' {
import Emitter = require('~event-kit/emitter');
import Disposable = require('~event-kit/disposable');
import CompositeDisposable = require('~event-kit/composite-disposable');

export = {
  Emitter,
  Disposable,
  CompositeDisposable
}
}
declare module 'event-kit/event-kit' {
import alias = require('~event-kit/event-kit');
export = alias;
}
declare module 'event-kit' {
import alias = require('~event-kit/event-kit');
export = alias;
}
